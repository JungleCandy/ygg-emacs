#+TITLE: Ygg-Emacs
#+STARTUP: indent
My personal Emacs configuration

* Preamble

This is not a starter kit, but maybe someone will find it useful, just as I have found others' configuration files useful, in particular, and not exclusively:

- [[https://github.com/bbatsov/prelude][Prelude]]
- [[https://github.com/rejeep/emacs][rajeep/emacs]]
- [[https://github.com/magnars/.emacs.d][Magnars/.emacs.d]]
- [[https://github.com/bodil/ohai-emacs][ohai-emacs]]
- [[https://github.com/technomancy/better-defaults][technomancy/better-defaults]]
- [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua's .emacs.d]]
- [[https://github.com/bbatsov/emacs.d][Bozhidar Batsov's .emacs.d]]
- [[https://github.com/gopar/.emacs.d][gapar/.emacs.d]]

Most of the configurations are in this .org file, which is loaded in init.el

** Installation
*** Install Emacs
**** macOS
I use [[https://github.com/d12frosted/homebrew-emacs-plus][Emacs Plus]]. On macOS this can be installed through:

=brew tap d12frosted/emacs-plus=

=brew install emacs-plus=
**** Linux
Installed with the App Manager
*** Install Spell checking support
**** macOS
=brew install hunspell=

in =~/Library/Spelling/= download and install the required dictionaries with

=get http://cgit.freedesktop.org/libreoffice/dictionaries/plain/en/en_GB.aff=

=get http://cgit.freedesktop.org/libreoffice/dictionaries/plain/en/en_GB.dic=

Running =(getenv "LANG")= on my system shows that the installed language is =en_GB= so there is no need to create symlinks to the directory as some web guides have suggested.
**** Linux
Installed with the App Manager
*** Clone the repo
Clone this repo to =.emacs.d=

=git clone https://github.com/JungleCandy/ygg-emacs.git .emacs.d=
*** Install Fonts
I'm using Neotree with icons, this requires =M-x all-the-icons-install-fonts= to be run.
** Licence
GPL v3, obviously

** Notes
Doing this in Org-Mode As a better way to be organised. And while I am looking at it I can try and figure out what I know and what I need to know about
- Flyspell 
- Company
- abbrev and family
- Projectile
- Org Mode
  
* Configuration

** Built-Ins
Configure what is built in.
*** Personal Information
#+begin_src emacs-lisp
  (setq user-full-name "Abizer Nasir"
        user-mail-address "abizern@mac.com"
        user-domain "abizern.dev")  
#+end_src

*** Built-in Configuration
#+begin_src emacs-lisp
  ;; We don't need a startup message.
  (setq inhibit-startup-message t)

  ;; disable the annoying bell ring
  (setq ring-bell-function 'ignore)

  ;; A suitably wide fill-column
  (set-default 'fill-column 140)

  ;; Show column and line numbe;; disable the annoying bell ring
  (setq ring-bell-function 'ignore)

  ;; A suitably wide fill-column
  (set-default 'fill-column 140)
  ;; Show column and line numbe      ;; We don't need a startup message.
  (setq inhibit-startup-message t)

  ;; disable the annoying bell ring
  (setq ring-bell-function 'ignore)

  ;; A suitably wide fill-column
  (set-default 'fill-column 140)

  ;; Show column and line number in the modeline
  (setq line-number-mode t)
  (setq column-number-mode t)

  ;; Turn off modes that look ugly.
  (mapc
   (lambda (mode)
     (when (fboundp mode)
       (funcall mode -1)))
   '(menu-bar-mode tool-bar-mode scroll-bar-mode horizontal-scroll-bar-mode))


  ;; more useful frame title, that show either a file or a
  ;; buffer name (if the buffer isn't visiting a file)
  (setq frame-title-format
        '((:eval (if (buffer-file-name)
                     (abbreviate-file-name (buffer-file-name))
                   "%b"))))

  ;; Tab-bar-mode
  (tab-bar-mode 1)
  (setq tab-bar-show 1)

  ;; Always load the newest version of a file, prevents stale compiled elisp code
  (setq load-prefer-newer t)

  ;; Tab indentation is a curse, a historical pestilence.
  ;; Turn it off and let's never talk about this default again.
  (set-default 'indent-tabs-mode nil)

  ;; Move files to trash
  (setq delete-by-moving-to-trash t)

  ;; Automatically save buffers before launching M-x compile and friends,
  ;; instead of asking you if you want to save.
  (setq compilation-ask-about-save nil)

  ;; Make the selection work like most people expect.
  (delete-selection-mode t)
  (transient-mark-mode t)

  ;; Automatically update unmodified buffers whose files have changed.
  (global-auto-revert-mode t)

  ;; We aren't using monospace typewriters anymore
  (setq sentence-end-double-space nil)

  ;; Since ethan-wspace takes care of this for us, we don't need it
  (setq mode-require-final-newline nil)
  (setq require-final-newline nil)

  ;; Turn off defadvice warnings during startup
  (setq ad-redefinition-action 'accept)

  ;; use hippie-expand instead of dabbrev
  (global-set-key (kbd "M-/") 'hippie-expand)

  ;; Always indent after a newline
  (define-key global-map (kbd "RET") 'newline-and-indent)

  ;; A quick major mode help with discover-my-major
  (define-key 'help-command (kbd "C-m") 'discover-my-major)

  ;; Align your code in a pretty way.
  (global-set-key (kbd "C-x \\") 'align-regexp)

  ;; Ask for y/n confirmation instead of yes/no
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; Make sure to always use UTF-8
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)

  ;; Make eshell work nicely with zsh
  (setq shell-file-name "/bin/zsh")
  (setq explicit-zsh-args '("--interactive" "--login"))
  (setq comint-process-echoes 0)

  ;; prevents echoes of commands in shell
  (add-hook 'shell-mode-hook
          (lambda () (setq comint-process-echoes t)))
#+end_src
*** Themes
Use the Dracula Pro theme
#+begin_src emacs-lisp
  (defun setup-gold-cursor (frame)
    "A gold bar cursor"
    (progn
      (set-face-attribute 'cursor nil :background "gold1")
      (setq-default cursor-type 'bar)))

  (add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
  (load-theme 'dracula-pro-pro :no-confirm)
  (add-hook 'after-make-frame-functions 'setup-gold-cursor t)
#+end_src

*** Custom storage directories
#+begin_src emacs-lisp
  ;; Directory for support files. Create if needed.
  (defvar savefile-dir (expand-file-name "savefile" user-emacs-directory)
    "The directory that stores support files.")
  (unless (file-exists-p savefile-dir)
    (make-directory savefile-dir))

  ;; Define where to keep the autoload declarations.
  (setq autoload-file (expand-file-name "loaddefs.el" savefile-dir))

  ;; Define where to keep user-settings, and load them.
  (setq custom-file (expand-file-name "custom.el" savefile-dir))
  (load custom-file 'noerror)

  ;; User lisp files. Create if needed.
  (defvar ygg-lisp-dir (expand-file-name "lisp" user-emacs-directory)
    "The directory for user lisp files.")
  (unless (file-exists-p ygg-lisp-dir)
    (make-directory ygg-lisp-dir))
  ;; Add the user-lisp directory to the load path.
  (add-to-list 'load-path ygg-lisp-dir)

  ;; store all backup and autosave files in the tmp dir
  (setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t)))

#+end_src
#+end_src

*** Custom storage directories
#+begin_src emacs-lisp
  ;; Directory for support files. Create if needed.
  (defvar savefile-dir (expand-file-name "savefile" user-emacs-directory)
    "The directory that stores support files.")
  (unless (file-exists-p savefile-dir)
    (make-directory savefile-dir))

  ;; Define where to keep the autoload declarations.
  (setq autoload-file (expand-file-name "loaddefs.el" savefile-dir))

  ;; Define where to keep user-settings, and load them.
  (setq custom-file (expand-file-name "custom.el" savefile-dir))
  (load custom-file 'noerror)

  ;; User lisp files. Create if needed.
  (defvar ygg-lisp-dir (expand-file-name "lisp" user-emacs-directory)
    "The directory for user lisp files.")
  (unless (file-exists-p ygg-lisp-dir)
    (make-directory ygg-lisp-dir))
  ;; Add the user-lisp directory to the load path.
  (add-to-list 'load-path ygg-lisp-dir)

  ;; store all backup and autosave files in the tmp dir
  (setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t)))

#+end_src
** Packages
*** Set up for using packages
#+begin_src emacs-lisp
  ;; Update package metadata if required
  (unless package-archive-contents
    (package-refresh-contents))

  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)

  ;; For more verbose startup, uncomment the line below
  ;; (setq use-package-verbose t)  
#+end_src

For more verbose startup, uncomment the line below
#+begin_src emacs-lisp
  (setq use-package-verbose t)
#+end_src
*** Productivity and usability
**** ace-window
Easily move between windows, optimised for Dvorak layout.
| M-o         | Put up indicators to make moving between windows easier |
| C-x C-o     | Swap windows                                            |
| C-u M-o     | Swaps current window with selected window               |
| C-u C-u M-o | Deletes the selected window                             |
#+begin_src emacs-lisp
  (use-package ace-window
    :ensure t
    :bind (("M-o" . ace-window)
           ("C-x C-o" . ace-swap-window))
    :config
    (setq aw-keys '(?a ?o ?e ?u ?i ?d ?h ?t ?n)))  
#+end_src

**** avy
Quick navigation by word or character
| C-; | avy-goto-word-1 |
| C-: | avy-goto-char   |
#+begin_src emacs-lisp
  (use-package avy
    :ensure t
    :bind (("C-;" . avy-goto-word-1)
           ("C-:" . avy-goto-char)))
#+end_src
**** company
All good IDEs have some interactivity
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :init (add-hook 'after-init-hook #'global-company-mode)
    :commands company-mode
    :config
    ;; Enable company-mode globally.
    (global-company-mode +1)
    ;; Except when you're in term-mode.
    (setq company-global-modes '(not term-mode))
    ;; Give Company a decent default configuration.
    (setq company-minimum-prefix-length 2
          company-selection-wrap-around t
          company-show-numbers t
          company-tooltip-align-annotations t
          company-require-match nil
          company-dabbrev-downcase nil
          company-dabbrev-ignore-case nil)
    ;; Sort completion candidates that already occur in the current
    ;; buffer at the top of the candidate list.
    (setq company-transformers '(company-sort-by-occurrence))
    ;; Show documentation where available for selected completion
    ;; after a short delay.

    (use-package company-quickhelp
      :ensure t
      :after (company)
      :config
      (setq company-quickhelp-delay 1)
      (company-quickhelp-mode 1))
    ;; Use C-\ to activate the Company autocompleter.
    ;; We invoke company-try-hard to gather completion candidates from multiple
    ;; sources if the active source isn't being very forthcoming.

    (use-package company-try-hard
      :ensure t
      :after (company)
      :bind ("C-\\" . company-try-hard)
      :config
      (bind-keys :map company-active-map
                 ("C-\\" . company-try-hard)))
    :diminish company-mode)  
#+end_src
**** eshell
***** eshell
#+begin_src emacs-lisp
  (use-package eshell
    :ensure t)
#+end_src

***** eshell-git-prompt
#+begin_src emacs-lisp
  (use-package eshell-git-prompt
    :after shell
    :ensure t)
#+end_src

***** eshell-syntax-highlighting
#+begin_src emacs-lisp
  (use-package eshell-syntax-highlighting
    :ensure t
    :config
    (eshell-syntax-highlighting-global-mode +1)
    :init
    (defface eshell-syntax-highlighting-invalid-face
      '((t :inherit diff-error))
      "Face used for invalid Eshell commands."
      :group 'eshell-syntax-highlighting))
#+end_src
**** ethan-wspace
See more at https://github.com/glasserc/ethan-wspace
| C-c c | to clean up a file |
#+begin_src emacs-lisp
  (use-package ethan-wspace
    :ensure t
    :commands global-ethan-wspace-mode
    :config (setq mode-require-final-newline nil)
    (global-ethan-wspace-mode 1)
    :bind ("C-c c" . ethan-wspace-clean-all)
    :diminish ethan-wspace-mode)  
#+end_src

**** expand-region
Select successively larger logical units. Works really well with multiple-cursors
| C-=   | Select and expand by logical units   |
| M-C-= | Contract the region be logical units |
#+begin_src emacs-lisp
  (use-package expand-region
    :ensure t
    :bind (("C-=" . er/expand-region)
           ("M-C-=" . er/contract-region)))
#+end_src

** Helper Functions
*** goto-line-with-feedback
| M-g M-g | Show line numbers temporarily and prompt for the line to move to |         
#+begin_src emacs-lisp
  (defun goto-line-with-feedback ()
    "Show line numbers temporarily, while prompting for the line number input."
    (interactive)
    (unwind-protect
        (progn
          (display-line-numbers-mode 1)
          (call-interactively 'goto-line))
      (display-line-numbers-mode -1)))

  ;; Remaps goto-line so that line numbers are turned on only when needed. M-g M-g
  (global-set-key [remap goto-line] 'goto-line-with-feedback)  
#+end_src
*** json-format
Pretty print JSON using the Python helper function
#+begin_src emacs-lisp
  (defun json-format ()
    "Reformats the JSON in the region for humans."
    (interactive)
    (save-excursion
      (shell-command-on-region (mark) (point) "python -m json.tool" (buffer-name) t)))
#+end_src

*** Custom Date insertion
| C-c C-d         | 13/4/2024                    |
| C-u C-t C-d     | 2024-04-13                   |
| C-u C-u C-d C-d | Tuesday, April 13, 2024      |
| C-c C-t         | ISO 8601 formatted date/time |

#+begin_src emacs-lisp
  ;; Insert Date
  ;; Usage
  ;; - `C-c C-d` -> 13/04/2024
  ;; - `C-u C-c C-d` -> 2024-04-13
  ;; - `C-u C-u C-d C-d` -> Tuesday, April 13, 2024
  (defun ygg-insert-date (prefix)
    "Insert the current date. With prefix-argument use ISO format. With two
        prefix arguments, write out the day and month name"
    (interactive "P")
    (let ((format (cond
                   ((not prefix) "%d/%m/%Y")
                   ((equal prefix '(4)) "%F")
                   ((equal prefix '(16)) "%A, %B %d, %Y")))
          (system-time-locale "en_GB"))
      (insert (format-time-string format))))

  (defun ygg-insert-iso-date-time ()
    "Insert the current date in ISO format for UTC"
    (interactive)
    (insert (format-time-string "%FT%T%z" nil "UTC")))

  (global-set-key (kbd "C-c C-d") 'ygg-insert-date)
  (global-set-key (kbd "C-c C-t") 'ygg-insert-iso-date-time)
#+end_src

*** ygg/wrap-with
Wrapper for parentheses
#+begin_src emacs-lisp
  (defun ygg/wrap-with (s)
    "Create a wrapper function for smartparens using S."
    `(lambda (&optional arg)
       (interactive "P")
       (sp-wrap-with-pair ,s)))  
#+end_src


** Key Bindings
*** Xcode Line up/down
| M-S-] | Move line up   |
| M-S-[ | Move line down |

#+begin_src emacs-lisp
  ;; Xcode binding to move line up
  (defun ygg/move-line-up ()
    "Move the current line up"
    (interactive)
    (transpose-lines 1)
    (forward-line -2)
    (indent-according-to-mode))

  (global-set-key (kbd "M-s-]")
                  (lambda ()
                    (interactive)
                    (ygg/move-line-up)))

  ;; Xcode binding to move line down
  (defun ygg/move-line-down ()
    "Move the current line down"
    (interactive)
    (forward-line 1)
    (transpose-lines 1)
    (forward-line -1)
    (indent-according-to-mode))

  (global-set-key (kbd "M-s-[")
                  (lambda ()
                    (interactive)
                    (ygg/move-line-down)))  
#+end_src

*** Better Movement
#+begin_src emacs-lisp
  ;; Move about more quickly
  ;; move about in steps of 5 with C-S insteard of just C-
  (global-set-key (kbd "C-S-n")
                  (lambda ()
                    (interactive)
                    (ignore-errors (forward-line 5))))

  (global-set-key (kbd "C-S-p")
                  (lambda ()
                    (interactive)
                    (ignore-errors (forward-line -5))))

  (global-set-key (kbd "C-S-f")
                  (lambda ()
                    (interactive)
                    (ignore-errors (forward-char 5))))

  (global-set-key (kbd "C-S-b")
                  (lambda ()
                    (interactive)
                    (ignore-errors (backward-char 5))))

 


#+end_src

#+begin_src emacs-lisp
  (use-package eshell
    :ensure t)
#+end_src

**** eshell-git-prompt
#+begin_src emacs-lisp
  (use-package eshell-git-prompt
    :after eshell
    :ensure t)
#+end_src

**** eshell-syntax-highlighting
#+begin_src emacs-lisp
  (use-package eshell-syntax-highlighting
    :ensure t
    :config
    (eshell-syntax-highlighting-global-mode +1)
    :init
    (defface eshell-syntax-highlighting-invalid-face
      '((t :inherit diff-error))
      "Face used for invalid Eshell commands."
      :group 'eshell-syntax-highlighting))
#+end_src
